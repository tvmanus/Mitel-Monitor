#ifndef _MiTAISub_H
#define _MiTAISub_H


#ifdef __cplusplus
extern "C" {
#include "mtai.h"
}
#endif  /* __cplusplus */
#include "Poco/NumberFormatter.h"
#include "Poco/Util/Subsystem.h"
#include "Poco/Util/Application.h"
#include "Poco/Notification.h"
#include "Poco/NotificationQueue.h"
#include "Poco/Task.h"
#include "Poco/TaskManager.h"
#include <vector>
#include <string>
#include <list>

using Poco::NumberFormatter;
using Poco::Util::Subsystem;
using Poco::Util::Application;
using Poco::Notification;
using Poco::NotificationQueue;
using Poco::Task;
using Poco::TaskManager;
using std::string;
using std::vector;
using std::list;

#define DEF_KEEPALIVE_VALUE   40

#define RESULT_TIMEOUT       0
#define RESULT_SUCCESS       1
#define RESULT_FAIL          2
#define RESULT_INTERRUPT     3
/*************************************************************************
PBX configuration structure
IPAddress - string representation of IP Address of ICP
TrunkNum - Vector of strings representing monitored trunks of ICP
DNNum - Vecotor of strings representing monitored DNs (Directory Numbers)
**************************************************************************/
typedef struct {
	string 				IPAddress;
	vector<string>		TrunkNum;
	vector<string>		DNNum;
} TM_PBX_Conf ;
/******************************************
MITAI monitor state
strDN - trunk number or DN
state - state code. See mitai.h for details
*******************************************/
typedef struct {
	string 	strDN;
	DWORD	state;
} TM_PBX_MonitorState ;

class TM_PBX;
class TM_Session;

/*
TM_Address is a class for manipulating with MITAI monitors
It is addressing a monitored object in ICP
m_hMonitor - handle to MITAI monitor object. Generated by MiTAI stack
SetMonitor - start monitoring a trunk or DN
StopMonitor - stop monitoring a trunk or DN
CallbackEventFromPBX - callback function called from MiTAI stack when we have a new event
GetIPAddress - returns IP address of ICP where this monitor is set
GetDN - returns trunk number or DN
GetState - returns current state of trunk or DN. see mitai.h for details
UpdateState - sending update when state is changing. 

Private variables

m_strDN - monitored trunk number or DN
*m_pSwitch - pointer to parent PBX object
m_dwState - current state
*/

class TM_Address
{
public:

	TM_Address (string dn, TM_PBX* pPBX);

	~TM_Address();

	hMonitorObject  m_hMonitor;
	DWORD SetMonitor();
	DWORD StopMonitor();

	static void CallbackEventFromPBX(SXEvent* pEvent, TM_Address* pAddress);

	string GetIPAddress();
	string GetDN();
	DWORD GetState();
	void UpdateState();

private:
	string m_strDN;
	TM_PBX* m_pSwitch;
	DWORD m_dwState;
	string m_strANI;
	string m_strDNIS;


};
/*
TM_PBX is a class for manipulating 
*/
class TM_PBX
{

public:
	TM_PBX (string ipAddress, TM_Session* pSession = NULL);
	~TM_PBX ();

	hPbxObject m_hPBX;

	DWORD OpenPBX();
	DWORD ClosePBX();
	DWORD MonitorLine(string dn);
	void MonitorLines(vector<string> lines);
	DWORD StopAllMonitors();

	static void CommErrorProc(hPbxObject hpbx_obj, void* lpData);

	string GetIPAddress();
	void GetMonitorState(vector<TM_PBX_MonitorState> & MonState);
	

private:
	string m_strIPAddress;
	TM_Session* m_pSession;
	vector<TM_Address*> m_vpAddress;
};

class TM_Session
{
public:
	TM_Session (string ipAddress, vector<string> dn);
	~TM_Session ();

	void OpenSession();
	void CloseSession();
	void RestartSession();
	DWORD ConnectToICP();
	DWORD DisconnectFromICP();

	string GetIPAddress();
	void GetSessionStatus(vector<TM_PBX_MonitorState> &MonState);
	BOOL m_bNeverConnected;

private:
	TM_PBX* m_pMiPBX;
	string m_strIPAddress;
	vector<string> m_strDN;

	BOOL m_bInit;


};


class MiTAISub: public Subsystem
{
public:
	MiTAISub();
	~MiTAISub();
	virtual void initialize(Application &app);
	const char* name() const;
	virtual void uninitialize();
	bool isInitialized();
	void run();
	vector<TM_Session*>  m_vpMiSession;
protected:
	vector<TM_PBX_Conf>		TM_Config;
	//Session manager. Maintains PBX sessions in separate tasks.
	TaskManager SessionManager;
private:
	BOOL m_bInit;
	
};

class MiTAINotification: public Notification
{
public:
	MiTAINotification(std::string data);
	std::string data() const;
private:
	std::string _data;
};
#endif _MiTAISub_H